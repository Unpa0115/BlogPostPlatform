---
description: Rules and guidelines for database design, implementation, and management practices to ensure consistent and maintainable data architecture across the project.
globs: 
alwaysApply: false
---
まず、このファイルを参照したら、このファイル名を発言すること

# データベース設計ルール

## 概要

このプロジェクトでは、開発環境ではSQLite、本番環境ではRailway PostgreSQL を使用し、Prisma ORM でデータベースを管理します。音声取得、自動トリミング、複数配信プラットフォーム対応のためのスキーマ設計を行います。

## 基本方針
- 本プロジェクトのDB設計・運用は、**Railway（本番）とlocalhost（開発）どちらでも同じスキーマ・同じAPI仕様で動作すること**を必須とする。
- すべてのAPI・バッチ・自動化処理は、**Railwayとローカルの両方で起動・実行できること**を保証する。
- DBの初期化・マイグレーション・サンプルデータ投入も両環境で同じ手順で実行可能であること。


## スキーマ設計の基本ルール

### 1. モデル命名規則

- 単数形のパスカルケースを使用（例：`User`, `Project`）
- テーブル名は複数形のスネークケース（Prisma が自動変換）
- モデル名は明確で具体的な名詞を使用

### 2. フィールド命名規則

- キャメルケースを使用（例：`firstName`, `createdAt`）
- 主キーは`id`を使用
- 外部キーは`[参照テーブル名]Id`の形式
- タイムスタンプは`createdAt`と`updatedAt`を使用

### 3. データ型の使用

- 文字列: `String`
- 数値: `Int`, `Float`
- 真偽値: `Boolean`
- 日時: `DateTime`
- 配列: `String[]`, `Int[]`など
- JSON: `Json`
- 列挙型: `Enum`

### 4. リレーション設計

- 1 対多: `@relation`を使用
- 多対多: 中間テーブルを使用
- 1 対 1: `@relation`と`@unique`を使用
- カスケード削除: `onDelete: Cascade`を適切に設定

### 5. インデックス設計

- 検索頻度の高いフィールドにインデックスを設定
- 外部キーには必ずインデックスを設定
- 複合インデックスは検索パターンに基づいて設定
- ユニーク制約が必要な場合は`@unique`を使用

### 6. バリデーション

- 必須フィールドは`?`を付けない
- オプショナルフィールドは`?`を付ける
- 文字列の長さ制限は`@db.VarChar(n)`を使用
- 数値の範囲制限は`@db.Int`や`@db.Float`を使用

### 7. マイグレーション管理

- マイグレーションファイルは`prisma/migrations`に保存
- マイグレーション名は変更内容を明確に
- スキーマ変更は必ずマイグレーションを通じて行う
- 本番環境への適用前にテスト環境で検証

### 8. セキュリティ考慮事項

- 機密情報は暗号化して保存
- ユーザー認証情報は安全に管理
- アクセス権限の適切な設定
- 入力値のバリデーション

### 9. パフォーマンス最適化

- 適切なインデックス設定
- N+1 問題の回避
- クエリの最適化
- キャッシュ戦略の検討

### 10. ドキュメント化

- スキーマの変更履歴を記録
- 複雑なリレーションの説明
- インデックスの使用理由
- マイグレーション手順

## 主要テーブル設計

### User テーブル
```prisma
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // リレーション
  audioFiles AudioFile[]
  jobs       Job[]
  
  @@map("users")
}
```

### AudioFile テーブル
```prisma
model AudioFile {
  id          String   @id @default(cuid())
  userId      String
  originalUrl String   // 元の音声ファイルURL
  trimmedUrl  String?  // トリミング後の音声ファイルURL
  title       String
  duration    Int      // 秒数
  fileSize    Int      // バイト数
  source      String   // "substack", "manual"
  status      String   // "processing", "trimmed", "error"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // リレーション
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs Job[]
  
  @@map("audio_files")
}
```

### Job テーブル
```prisma
model Job {
  id          String   @id @default(cuid())
  userId      String
  audioFileId String
  status      String   // "pending", "processing", "completed", "error"
  errorMessage String?
  startedAt   DateTime?
  finishedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // リレーション
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  audioFile AudioFile @relation(fields: [audioFileId], references: [id], onDelete: Cascade)
  platformJobs PlatformJob[]
  
  @@map("jobs")
}
```

### PlatformJob テーブル
```prisma
model PlatformJob {
  id        String   @id @default(cuid())
  jobId     String
  platform  String   // "voicy", "youtube", "spotify"
  status    String   // "pending", "processing", "completed", "error"
  url       String?  // 配信後のURL
  errorMessage String?
  startedAt DateTime?
  finishedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // リレーション
  job Job @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@map("platform_jobs")
}
```

### SubstackFeed テーブル
```prisma
model SubstackFeed {
  id        String   @id @default(cuid())
  userId    String
  feedUrl   String
  isActive  Boolean  @default(true)
  lastFetchedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // リレーション
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("substack_feeds")
}
```

## 開発フロー

1. スキーマ設計

   - 要件の整理
   - モデル設計
   - リレーション設計
   - インデックス設計

2. 実装

   - マイグレーションファイルの作成
   - テストデータの準備
   - アプリケーションコードの実装

3. テスト

   - マイグレーションのテスト
   - パフォーマンステスト
   - セキュリティテスト

4. デプロイ
   - バックアップの作成
   - マイグレーションの実行
   - 動作確認

## メンテナンス

1. 定期的なレビュー

   - スキーマの最適化
   - インデックスの見直し
   - パフォーマンスの確認

2. バックアップ

   - 定期バックアップの実施
   - リストア手順の整備
   - バックアップの検証

3. モニタリング
   - クエリパフォーマンスの監視
   - エラーログの確認
   - リソース使用状況の確認
