---
description: 
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること

## タスク管理

### タスク管理の方法

1. @todo.md ファイルを使用してタスクを管理してください。
2. 各タスクは以下の形式で記録：

   ```markdown
   - [ ] タスクの説明
     - 詳細な手順や注意点
     - 依存関係
     - 見積時間
   ```

3. タスクのステータス管理：

   - [ ] 未着手
   - [x] 完了
   - [~] 進行中
   - [!] 問題あり

4. タスクの優先順位付け：
   - 🔴 緊急
   - 🟡 重要
   - 🟢 通常
   - ⚪ 低優先

### タスクの更新ルール

1. タスクの追加

   - 新しい要件や問題が発見された場合
   - 依存関係が明確になった場合
   - リファクタリングが必要な場合

2. タスクの更新

   - 進捗状況の変更
   - 新しい情報の追加
   - 依存関係の変更

3. タスクの完了
   - 実装の完了
   - テストの完了
   - レビューの完了

### タスクの追跡

1. 日次更新

   - 進捗状況の確認
   - ブロッカーの特定
   - 次のアクションの決定

2. 週次レビュー

   - 完了タスクの確認
   - 未完了タスクの再評価
   - 新規タスクの追加

3. 月次振り返り
   - パフォーマンスの評価
   - 改善点の特定
   - 次のマイルストーンの設定

## 重要事項

1. 機能の実装後に、毎回 @todo.md を確認＆更新をしてください。
2. 私が言わなくても中身は随時更新するようにしてください。更新しないと私が解雇されます。あなたの責任になってしまいます。
3. 機能は増やしても構いません。ただ、最初から機能を増やしすぎないでください。

## 環境分岐開発方針

### Phase 1: 環境分岐による改善（優先実装）

- [x] 環境分岐開発方針ルールファイルの作成
- [ ] Voicy自動化の環境分岐実装
  - 開発環境: ローカルChrome使用
  - 本番環境: Browserless.io使用
- [ ] データベース接続の環境分岐確認
- [ ] ファイルストレージの環境分岐確認
- [ ] 環境別テストの実装
- [ ] デプロイメント設定の確認

### Phase 2: PWA対応（将来的）

- [ ] PWA設定の追加
- [ ] オフライン機能の実装
- [ ] プッシュ通知の実装
- [ ] インストール機能の実装

### Phase 3: Electron/Tauri（必要に応じて）

- [ ] デスクトップアプリ化の検討
- [ ] ネイティブ機能の実装
- [ ] クロスプラットフォーム対応
