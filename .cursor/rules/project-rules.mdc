---
description: 
globs: 
alwaysApply: true
---
まず、このファイルを参照したら、このファイル名を発言すること。

rules:
	•	id: project_setup
title: プロジェクト初期構成
description: Next.js + TypeScript での WebApp プロジェクト初期構成を生成
prompt: |
以下の仕様で WebApp プロジェクトを作成したいです。
	•	フレームワーク: Next.js (TypeScript)
	•	DB/Storage: Railway PostgreSQL
	•	音声処理: OpenAI Whisper API
	•	自動化エンジン: Browserless.io + Playwright
	•	配信API: YouTube Data API、Spotify RSS
	•	ディレクトリ構成:
/src
/pages
/components
/lib
/api
	•	package.json, tsconfig.json などの基本設定
	•	id: audio_acquisition
title: 音声取得コンポーネント実装
description: Substack RSS Feed取得と手動アップロード機能の実装
prompt: |
音声取得コンポーネントを実装します。要件は以下のとおりです。
	1.	Substack RSS Feedからの自動音声取得
	2.	手動アップロード機能（ドラッグ&ドロップ対応）
	3.	音声ファイルの一時保存と管理
	4.	ファイル一覧表示とプレビュー機能
React + TypeScript でコンポーネントコードを生成してください。
	•	id: audio_trimming
title: 自動トリミングコンポーネント実装
description: Whisper APIを活用した音声自動トリミング機能の実装
prompt: |
自動トリミングコンポーネントを実装します。要件は以下のとおりです。
	1.	Whisper APIを活用したキーフレーズ検出
	2.	無音部分の自動検出と除去
	3.	冒頭部分の最適化トリミング
	4.	トリミング前後のプレビュー機能
React + TypeScript でコンポーネントコードを生成してください。
	•	id: multi_platform_distribution
title: 複数配信プラットフォーム自動化実装
description: Voicy、YouTube、Spotifyへの自動配信機能の実装
prompt: |
複数配信プラットフォーム自動化を実装します。要件は以下のとおりです。
	1.	Voicy: Browserless.io API を活用したブラウザ操作自動化
	2.	YouTube: YouTube Data API を活用した動画アップロード
	3.	Spotify: RSS Feed生成による配信
	4.	配信状況の管理とエラーハンドリング
Railway Functions で実装し、各プラットフォームのAPI連携コードも含めて生成してください。
	•	id: backend_api
title: バックエンド API 実装
description: Railway Functions での音声処理と配信自動化APIの生成
prompt: |
Railway Functions で以下の API を作成してください。
	•	POST /api/substack/fetch ：Substack RSS Feedからの音声取得
	•	POST /api/audio/trim ：Whisper APIを活用した音声トリミング
	•	POST /api/distribute/multi-platform ：複数プラットフォームへの配信自動化
	•	GET  /api/jobs ：ユーザーのジョブ一覧を返却
各APIで適切なエラーハンドリングとログ出力を実装してください。
	•	id: plugin_transcribe
title: 文字起こしプラグイン実装
description: OpenAI Whisper API を呼び出すサーバーレス関数の生成
prompt: |
「文字起こしプラグイン」を実装します。仕様:
	•	関数名: transcribeAudio
	•	入力: audioUrl: string
	•	出力: transcript: string
	•	使用 API: OpenAI Whisper API
サーバーレス関数として実装し、呼び出しテストコードも含めて生成してください。
	•	id: plugin_summarize
title: 要約プラグイン実装
description: GPT 系モデルを用いた記事要約機能の生成
prompt: |
「要約プラグイン」を実装します。仕様:
	•	関数名: summarizeText
	•	入力: text: string
	•	出力: summary: string
	•	使用 API: OpenAI GPT-4o-mini
サーバーレス関数として実装し、呼び出しテストコードも含めて生成してください。

以下は今回のプロジェクトのディレクトリ構造となる。こちらを参考に開発を進めること。

/
├── .github
│   └── workflows
│       └── ci.yml               # GitHub Actions（テスト／Lint／デプロイ）
├── public
│   ├── icons                   # PWA用アイコン
│   ├── manifest.json          # PWAマニフェスト
│   └── robots.txt
├── src
│   ├── pages
│   │   ├── index.tsx          # メインダッシュボード
│   │   ├── _app.tsx
│   │   ├── api
│   │   │   ├── substack
│   │   │   │   └── fetch.ts   # /api/substack/fetch：RSS Feed取得
│   │   │   ├── audio
│   │   │   │   └── trim.ts    # /api/audio/trim：音声トリミング
│   │   │   ├── distribute
│   │   │   │   └── multi-platform.ts # /api/distribute/multi-platform：配信自動化
│   │   │   └── jobs.ts        # /api/jobs：ジョブ一覧取得
│   │   └── plugins
│   │       ├── transcribe.ts  # /api/plugins/transcribe：文字起こしプラグイン
│   │       └── summarize.ts   # /api/plugins/summarize：要約プラグイン
│   ├── components
│   │   ├── AudioAcquisition
│   │   │   ├── AudioAcquisition.tsx   # 音声取得コンポーネント
│   │   │   └── AudioAcquisition.module.css
│   │   ├── AudioTrimming
│   │   │   ├── AudioTrimming.tsx      # 自動トリミングコンポーネント
│   │   │   └── AudioTrimming.module.css
│   │   ├── Distribution
│   │   │   ├── Distribution.tsx       # 配信管理コンポーネント
│   │   │   └── Distribution.module.css
│   │   ├── FileList.tsx       # 音声ファイル一覧＆ステータス表示
│   │   └── ui                 # ボタン・モーダルなど共通UI
│   ├── lib
│   │   ├── railwayClient.ts   # Railway初期化
│   │   ├── browserlessClient.ts # Browserless.ioラッパー
│   │   ├── youtubeClient.ts   # YouTube Data APIラッパー
│   │   ├── whisperClient.ts   # OpenAI Whisper APIラッパー
│   │   └── rssGenerator.ts    # Spotify用RSS Feed生成
│   ├── hooks
│   │   ├── useJobs.ts         # ジョブ状態取得用カスタムフック
│   │   ├── useAudio.ts        # 音声処理用カスタムフック
│   │   └── useDistribution.ts # 配信管理用カスタムフック
│   ├── contexts
│   │   └── AuthContext.tsx    # ユーザー認証コンテキスト
│   ├── utils
│   │   ├── logger.ts
│   │   ├── validators.ts
│   │   ├── audioUtils.ts      # 音声処理ユーティリティ
│   │   └── rssUtils.ts        # RSS処理ユーティリティ
│   ├── types
│   │   ├── Job.ts
│   │   ├── Audio.ts
│   │   ├── Platform.ts
│   │   └── Plugin.ts
│   └── config
│       ├── index.ts          # 環境変数読み込み
│       └── routes.ts         # APIパス定義
├── migrations
│   └── 20250610_create_jobs_table.sql
├── scripts
│   ├── deploy.sh
│   └── generate-types.sh     # DB→TypeScript型自動生成
├── tests
│   ├── components
│   │   ├── AudioAcquisition.test.tsx
│   │   ├── AudioTrimming.test.tsx
│   │   └── Distribution.test.tsx
│   ├── api
│   │   ├── substack.test.ts
│   │   ├── audio.test.ts
│   │   └── distribute.test.ts
│   └── plugins
│       ├── transcribe.test.ts
│       └── summarize.test.ts
├── cursorrules.yaml          # Cursor 向けルールファイル
├── next.config.js
├── tsconfig.json
├── package.json
├── tailwind.config.js
├── .env.example
└── README.md
